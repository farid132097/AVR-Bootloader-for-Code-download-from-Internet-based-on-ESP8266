
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00007a6a  00000afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6a  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000300  0080022e  0080022e  00000c2c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015a  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b87  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000282  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d2  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000258  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000794  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	12 e0       	ldi	r17, 0x02	; 2
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	ea e6       	ldi	r30, 0x6A	; 106
    707c:	fa e7       	ldi	r31, 0x7A	; 122
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <.do_copy_data_start>

00007080 <.do_copy_data_loop>:
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0

00007084 <.do_copy_data_start>:
    7084:	ae 32       	cpi	r26, 0x2E	; 46
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <.do_copy_data_loop>

0000708a <__do_clear_bss>:
    708a:	15 e0       	ldi	r17, 0x05	; 5
    708c:	ae e2       	ldi	r26, 0x2E	; 46
    708e:	b2 e0       	ldi	r27, 0x02	; 2
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	ae 32       	cpi	r26, 0x2E	; 46
    7096:	b1 07       	cpc	r27, r17
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 ca 3c 	call	0x7994	; 0x7994 <main>
    709e:	0c 94 33 3d 	jmp	0x7a66	; 0x7a66 <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <data>:
#define  DEBUG_DELAY     1000000/DEBUG_BAUD
#define  dbg_enable()  _delay_us(100);DEBUG_DDR|= (1<<DEBUG_PIN)
#define  dbg_disable() DEBUG_DDR&=~(1<<DEBUG_PIN)

void data(uint8_t state){
if     (state==1){DEBUG_PORT|= (1<<DEBUG_PIN);}
    70a6:	81 30       	cpi	r24, 0x01	; 1
    70a8:	11 f4       	brne	.+4      	; 0x70ae <data+0x8>
    70aa:	5a 9a       	sbi	0x0b, 2	; 11
    70ac:	08 95       	ret
else if(state==0){DEBUG_PORT&=~(1<<DEBUG_PIN);}
    70ae:	88 23       	and	r24, r24
    70b0:	09 f4       	brne	.+2      	; 0x70b4 <data+0xe>
    70b2:	5a 98       	cbi	0x0b, 2	; 11
    70b4:	08 95       	ret

000070b6 <dbg_single_byte>:
}

void dbg_single_byte(uint8_t byte){
    70b6:	cf 92       	push	r12
    70b8:	df 92       	push	r13
    70ba:	ef 92       	push	r14
    70bc:	ff 92       	push	r15
    70be:	0f 93       	push	r16
    70c0:	1f 93       	push	r17
    70c2:	df 93       	push	r29
    70c4:	cf 93       	push	r28
    70c6:	cd b7       	in	r28, 0x3d	; 61
    70c8:	de b7       	in	r29, 0x3e	; 62
    70ca:	2a 97       	sbiw	r28, 0x0a	; 10
    70cc:	0f b6       	in	r0, 0x3f	; 63
    70ce:	f8 94       	cli
    70d0:	de bf       	out	0x3e, r29	; 62
    70d2:	0f be       	out	0x3f, r0	; 63
    70d4:	cd bf       	out	0x3d, r28	; 61
uint8_t tmp[10]={0,0,0,0,0,0,0,0,0,1};
    70d6:	fe 01       	movw	r30, r28
    70d8:	31 96       	adiw	r30, 0x01	; 1
    70da:	9a e0       	ldi	r25, 0x0A	; 10
    70dc:	df 01       	movw	r26, r30
    70de:	1d 92       	st	X+, r1
    70e0:	9a 95       	dec	r25
    70e2:	e9 f7       	brne	.-6      	; 0x70de <dbg_single_byte+0x28>
    70e4:	91 e0       	ldi	r25, 0x01	; 1
    70e6:	9a 87       	std	Y+10, r25	; 0x0a
    70e8:	fe 01       	movw	r30, r28
    70ea:	32 96       	adiw	r30, 0x02	; 2
    70ec:	20 e0       	ldi	r18, 0x00	; 0
    70ee:	30 e0       	ldi	r19, 0x00	; 0
for(uint8_t i=0;i<8;i++){tmp[i+1]=(byte>>i)&1;}
    70f0:	48 2f       	mov	r20, r24
    70f2:	50 e0       	ldi	r21, 0x00	; 0
    70f4:	ca 01       	movw	r24, r20
    70f6:	02 2e       	mov	r0, r18
    70f8:	02 c0       	rjmp	.+4      	; 0x70fe <dbg_single_byte+0x48>
    70fa:	95 95       	asr	r25
    70fc:	87 95       	ror	r24
    70fe:	0a 94       	dec	r0
    7100:	e2 f7       	brpl	.-8      	; 0x70fa <dbg_single_byte+0x44>
    7102:	81 70       	andi	r24, 0x01	; 1
    7104:	81 93       	st	Z+, r24
    7106:	2f 5f       	subi	r18, 0xFF	; 255
    7108:	3f 4f       	sbci	r19, 0xFF	; 255
    710a:	28 30       	cpi	r18, 0x08	; 8
    710c:	31 05       	cpc	r19, r1
    710e:	91 f7       	brne	.-28     	; 0x70f4 <dbg_single_byte+0x3e>
    7110:	8e 01       	movw	r16, r28
    7112:	0f 5f       	subi	r16, 0xFF	; 255
    7114:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7116:	90 ed       	ldi	r25, 0xD0	; 208
    7118:	c9 2e       	mov	r12, r25
    711a:	d1 2c       	mov	r13, r1
for(uint8_t i=0;i<10;i++){data(tmp[i]);_delay_us(DEBUG_DELAY);}
    711c:	8b e0       	ldi	r24, 0x0B	; 11
    711e:	e8 2e       	mov	r14, r24
    7120:	f1 2c       	mov	r15, r1
    7122:	ec 0e       	add	r14, r28
    7124:	fd 1e       	adc	r15, r29
    7126:	f8 01       	movw	r30, r16
    7128:	81 91       	ld	r24, Z+
    712a:	8f 01       	movw	r16, r30
    712c:	0e 94 53 38 	call	0x70a6	; 0x70a6 <data>
    7130:	c6 01       	movw	r24, r12
    7132:	01 97       	sbiw	r24, 0x01	; 1
    7134:	f1 f7       	brne	.-4      	; 0x7132 <dbg_single_byte+0x7c>
    7136:	0e 15       	cp	r16, r14
    7138:	1f 05       	cpc	r17, r15
    713a:	a9 f7       	brne	.-22     	; 0x7126 <dbg_single_byte+0x70>
    713c:	80 ea       	ldi	r24, 0xA0	; 160
    713e:	91 e0       	ldi	r25, 0x01	; 1
    7140:	01 97       	sbiw	r24, 0x01	; 1
    7142:	f1 f7       	brne	.-4      	; 0x7140 <dbg_single_byte+0x8a>
_delay_us(DEBUG_DELAY*2);
}
    7144:	2a 96       	adiw	r28, 0x0a	; 10
    7146:	0f b6       	in	r0, 0x3f	; 63
    7148:	f8 94       	cli
    714a:	de bf       	out	0x3e, r29	; 62
    714c:	0f be       	out	0x3f, r0	; 63
    714e:	cd bf       	out	0x3d, r28	; 61
    7150:	cf 91       	pop	r28
    7152:	df 91       	pop	r29
    7154:	1f 91       	pop	r17
    7156:	0f 91       	pop	r16
    7158:	ff 90       	pop	r15
    715a:	ef 90       	pop	r14
    715c:	df 90       	pop	r13
    715e:	cf 90       	pop	r12
    7160:	08 95       	ret

00007162 <dbg_print_integer>:
dbg_enable();
for(uint8_t i=0;i<strlen(c);i++){dbg_single_byte(c[i]);}
dbg_disable();
}

void dbg_print_integer(uint32_t num){
    7162:	8f 92       	push	r8
    7164:	9f 92       	push	r9
    7166:	bf 92       	push	r11
    7168:	cf 92       	push	r12
    716a:	df 92       	push	r13
    716c:	ef 92       	push	r14
    716e:	ff 92       	push	r15
    7170:	0f 93       	push	r16
    7172:	1f 93       	push	r17
    7174:	df 93       	push	r29
    7176:	cf 93       	push	r28
    7178:	cd b7       	in	r28, 0x3d	; 61
    717a:	de b7       	in	r29, 0x3e	; 62
    717c:	2a 97       	sbiw	r28, 0x0a	; 10
    717e:	0f b6       	in	r0, 0x3f	; 63
    7180:	f8 94       	cli
    7182:	de bf       	out	0x3e, r29	; 62
    7184:	0f be       	out	0x3f, r0	; 63
    7186:	cd bf       	out	0x3d, r28	; 61
uint32_t curr=num;uint8_t buf[10],cnt=0;
if(curr==0){dbg_single_byte('0');}
    7188:	61 15       	cp	r22, r1
    718a:	71 05       	cpc	r23, r1
    718c:	81 05       	cpc	r24, r1
    718e:	91 05       	cpc	r25, r1
    7190:	19 f0       	breq	.+6      	; 0x7198 <dbg_print_integer+0x36>
    7192:	7b 01       	movw	r14, r22
    7194:	8c 01       	movw	r16, r24
    7196:	06 c0       	rjmp	.+12     	; 0x71a4 <dbg_print_integer+0x42>
    7198:	80 e3       	ldi	r24, 0x30	; 48
    719a:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <dbg_single_byte>
    719e:	ee 24       	eor	r14, r14
    71a0:	ff 24       	eor	r15, r15
    71a2:	87 01       	movw	r16, r14
    71a4:	bb 24       	eor	r11, r11
    71a6:	4e 01       	movw	r8, r28
    71a8:	08 94       	sec
    71aa:	81 1c       	adc	r8, r1
    71ac:	91 1c       	adc	r9, r1
    71ae:	19 c0       	rjmp	.+50     	; 0x71e2 <dbg_print_integer+0x80>
while(curr!=0){buf[cnt]=curr%10;curr=curr/10;cnt++;}
    71b0:	c8 0c       	add	r12, r8
    71b2:	d9 1c       	adc	r13, r9
    71b4:	c8 01       	movw	r24, r16
    71b6:	b7 01       	movw	r22, r14
    71b8:	2a e0       	ldi	r18, 0x0A	; 10
    71ba:	30 e0       	ldi	r19, 0x00	; 0
    71bc:	40 e0       	ldi	r20, 0x00	; 0
    71be:	50 e0       	ldi	r21, 0x00	; 0
    71c0:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    71c4:	f6 01       	movw	r30, r12
    71c6:	60 83       	st	Z, r22
    71c8:	c8 01       	movw	r24, r16
    71ca:	b7 01       	movw	r22, r14
    71cc:	2a e0       	ldi	r18, 0x0A	; 10
    71ce:	30 e0       	ldi	r19, 0x00	; 0
    71d0:	40 e0       	ldi	r20, 0x00	; 0
    71d2:	50 e0       	ldi	r21, 0x00	; 0
    71d4:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    71d8:	c9 01       	movw	r24, r18
    71da:	da 01       	movw	r26, r20
    71dc:	7c 01       	movw	r14, r24
    71de:	8d 01       	movw	r16, r26
    71e0:	b3 94       	inc	r11
    71e2:	cb 2c       	mov	r12, r11
    71e4:	dd 24       	eor	r13, r13
    71e6:	e1 14       	cp	r14, r1
    71e8:	f1 04       	cpc	r15, r1
    71ea:	01 05       	cpc	r16, r1
    71ec:	11 05       	cpc	r17, r1
    71ee:	01 f7       	brne	.-64     	; 0x71b0 <dbg_print_integer+0x4e>
    71f0:	84 01       	movw	r16, r8
    71f2:	0c 0d       	add	r16, r12
    71f4:	1d 1d       	adc	r17, r13
    71f6:	05 c0       	rjmp	.+10     	; 0x7202 <dbg_print_integer+0xa0>
for(int i=cnt-1;i>-1;i--){dbg_single_byte(buf[i]+48);}
    71f8:	f8 01       	movw	r30, r16
    71fa:	80 81       	ld	r24, Z
    71fc:	80 5d       	subi	r24, 0xD0	; 208
    71fe:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <dbg_single_byte>
    7202:	01 50       	subi	r16, 0x01	; 1
    7204:	10 40       	sbci	r17, 0x00	; 0
    7206:	0c 17       	cp	r16, r28
    7208:	1d 07       	cpc	r17, r29
    720a:	b1 f7       	brne	.-20     	; 0x71f8 <dbg_print_integer+0x96>
}
    720c:	2a 96       	adiw	r28, 0x0a	; 10
    720e:	0f b6       	in	r0, 0x3f	; 63
    7210:	f8 94       	cli
    7212:	de bf       	out	0x3e, r29	; 62
    7214:	0f be       	out	0x3f, r0	; 63
    7216:	cd bf       	out	0x3d, r28	; 61
    7218:	cf 91       	pop	r28
    721a:	df 91       	pop	r29
    721c:	1f 91       	pop	r17
    721e:	0f 91       	pop	r16
    7220:	ff 90       	pop	r15
    7222:	ef 90       	pop	r14
    7224:	df 90       	pop	r13
    7226:	cf 90       	pop	r12
    7228:	bf 90       	pop	r11
    722a:	9f 90       	pop	r9
    722c:	8f 90       	pop	r8
    722e:	08 95       	ret

00007230 <WDT_reset>:
uint8_t  data_array[64][6];
uint32_t final_data[64];
uint8_t  boot_buffer[128];

void WDT_reset(void){
WDTCSR=(1<<WDCE)|(1<<WDE);
    7230:	88 e1       	ldi	r24, 0x18	; 24
    7232:	80 93 60 00 	sts	0x0060, r24
WDTCSR=(1<<WDE);
    7236:	88 e0       	ldi	r24, 0x08	; 8
    7238:	80 93 60 00 	sts	0x0060, r24
    723c:	ff cf       	rjmp	.-2      	; 0x723c <WDT_reset+0xc>

0000723e <WDT_disable>:
while(1);
}

void WDT_disable(void){
cli();
    723e:	f8 94       	cli
MCUSR=0;
    7240:	14 be       	out	0x34, r1	; 52
WDTCSR|=(1<<WDCE)|(1<<WDE);
    7242:	e0 e6       	ldi	r30, 0x60	; 96
    7244:	f0 e0       	ldi	r31, 0x00	; 0
    7246:	80 81       	ld	r24, Z
    7248:	88 61       	ori	r24, 0x18	; 24
    724a:	80 83       	st	Z, r24
WDTCSR=0;
    724c:	10 82       	st	Z, r1
}
    724e:	08 95       	ret

00007250 <ESP_init>:

void ESP_init(uint32_t BAUD){
    7250:	9b 01       	movw	r18, r22
    7252:	ac 01       	movw	r20, r24
WDTCSR=(1<<WDE);
while(1);
}

void WDT_disable(void){
cli();
    7254:	f8 94       	cli
MCUSR=0;
    7256:	14 be       	out	0x34, r1	; 52
WDTCSR|=(1<<WDCE)|(1<<WDE);
    7258:	80 91 60 00 	lds	r24, 0x0060
    725c:	88 61       	ori	r24, 0x18	; 24
    725e:	80 93 60 00 	sts	0x0060, r24
WDTCSR=0;
    7262:	10 92 60 00 	sts	0x0060, r1
}

void ESP_init(uint32_t BAUD){
WDT_disable();
uint16_t UBRR_VAL=(((F_CPU/16)/BAUD)-1);
    7266:	60 e2       	ldi	r22, 0x20	; 32
    7268:	71 ea       	ldi	r23, 0xA1	; 161
    726a:	87 e0       	ldi	r24, 0x07	; 7
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7272:	21 50       	subi	r18, 0x01	; 1
    7274:	30 40       	sbci	r19, 0x00	; 0
UBRR0H=UBRR_VAL>>8;
    7276:	30 93 c5 00 	sts	0x00C5, r19
UBRR0L=UBRR_VAL;
    727a:	20 93 c4 00 	sts	0x00C4, r18
UCSR0B=(1<<RXEN0)|(1<<TXEN0);
    727e:	88 e1       	ldi	r24, 0x18	; 24
    7280:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=(1<<UCSZ00)|(1<<UCSZ01);
    7284:	86 e0       	ldi	r24, 0x06	; 6
    7286:	80 93 c2 00 	sts	0x00C2, r24
    728a:	88 ee       	ldi	r24, 0xE8	; 232
    728c:	93 e0       	ldi	r25, 0x03	; 3
    728e:	28 ec       	ldi	r18, 0xC8	; 200
    7290:	30 e0       	ldi	r19, 0x00	; 0
    7292:	f9 01       	movw	r30, r18
    7294:	31 97       	sbiw	r30, 0x01	; 1
    7296:	f1 f7       	brne	.-4      	; 0x7294 <ESP_init+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7298:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    729a:	d9 f7       	brne	.-10     	; 0x7292 <ESP_init+0x42>
_delay_ms(100);
}
    729c:	08 95       	ret

0000729e <ESP_single>:

void ESP_single(unsigned char data){
    729e:	98 2f       	mov	r25, r24
while((UCSR0A & (1<<UDRE0))==0);
    72a0:	80 91 c0 00 	lds	r24, 0x00C0
    72a4:	85 ff       	sbrs	r24, 5
    72a6:	fc cf       	rjmp	.-8      	; 0x72a0 <ESP_single+0x2>
UDR0=data;
    72a8:	90 93 c6 00 	sts	0x00C6, r25
}
    72ac:	08 95       	ret

000072ae <ESP_rx>:
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    72ae:	80 91 c0 00 	lds	r24, 0x00C0
    72b2:	87 ff       	sbrs	r24, 7
    72b4:	fc cf       	rjmp	.-8      	; 0x72ae <ESP_rx>
return UDR0;
    72b6:	80 91 c6 00 	lds	r24, 0x00C6
}
    72ba:	08 95       	ret

000072bc <mpl>:
ESP_print_text(API);
ESP_print_text("&results=16\r\n");
}


uint32_t mpl(uint8_t dgt){
    72bc:	0f 93       	push	r16
    72be:	1f 93       	push	r17
    72c0:	08 2f       	mov	r16, r24
    72c2:	21 e0       	ldi	r18, 0x01	; 1
    72c4:	30 e0       	ldi	r19, 0x00	; 0
    72c6:	40 e0       	ldi	r20, 0x00	; 0
    72c8:	50 e0       	ldi	r21, 0x00	; 0
    72ca:	10 e0       	ldi	r17, 0x00	; 0
    72cc:	0b c0       	rjmp	.+22     	; 0x72e4 <mpl+0x28>
uint32_t mpl_val=1;
for(uint8_t i=0;i<dgt;i++){mpl_val*=10;}
    72ce:	ca 01       	movw	r24, r20
    72d0:	b9 01       	movw	r22, r18
    72d2:	2a e0       	ldi	r18, 0x0A	; 10
    72d4:	30 e0       	ldi	r19, 0x00	; 0
    72d6:	40 e0       	ldi	r20, 0x00	; 0
    72d8:	50 e0       	ldi	r21, 0x00	; 0
    72da:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__mulsi3>
    72de:	9b 01       	movw	r18, r22
    72e0:	ac 01       	movw	r20, r24
    72e2:	1f 5f       	subi	r17, 0xFF	; 255
    72e4:	10 17       	cp	r17, r16
    72e6:	98 f3       	brcs	.-26     	; 0x72ce <mpl+0x12>
return mpl_val;
}
    72e8:	b9 01       	movw	r22, r18
    72ea:	ca 01       	movw	r24, r20
    72ec:	1f 91       	pop	r17
    72ee:	0f 91       	pop	r16
    72f0:	08 95       	ret

000072f2 <boot_program_page>:
   final=0;
   }
}


void boot_program_page (uint32_t page, uint8_t *buf){
    72f2:	0f 93       	push	r16
    72f4:	1f 93       	push	r17
    72f6:	cf 93       	push	r28
    72f8:	df 93       	push	r29
    72fa:	da 01       	movw	r26, r20

    uint16_t i;
    uint8_t sreg;
    sreg = SREG;
    72fc:	0f b7       	in	r16, 0x3f	; 63
    cli();
    72fe:	f8 94       	cli
    eeprom_busy_wait ();
    7300:	f9 99       	sbic	0x1f, 1	; 31
    7302:	fe cf       	rjmp	.-4      	; 0x7300 <boot_program_page+0xe>
    boot_page_erase (page);
    7304:	ab 01       	movw	r20, r22
    7306:	83 e0       	ldi	r24, 0x03	; 3
    7308:	fb 01       	movw	r30, r22
    730a:	80 93 57 00 	sts	0x0057, r24
    730e:	e8 95       	spm
    boot_spm_busy_wait (); 
    7310:	07 b6       	in	r0, 0x37	; 55
    7312:	00 fc       	sbrc	r0, 0
    7314:	fd cf       	rjmp	.-6      	; 0x7310 <boot_program_page+0x1e>
    7316:	fa 01       	movw	r30, r20
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    {
        uint16_t w = *buf++;
        w += (*buf++) << 8;
        boot_page_fill (page + i, w);
    7318:	11 e0       	ldi	r17, 0x01	; 1
    cli();
    eeprom_busy_wait ();
    boot_page_erase (page);
    boot_spm_busy_wait (); 
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    731a:	ba 01       	movw	r22, r20
    731c:	60 58       	subi	r22, 0x80	; 128
    731e:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        uint16_t w = *buf++;
    7320:	8c 91       	ld	r24, X
        w += (*buf++) << 8;
    7322:	11 96       	adiw	r26, 0x01	; 1
    7324:	3c 91       	ld	r19, X
    7326:	11 97       	sbiw	r26, 0x01	; 1
    7328:	20 e0       	ldi	r18, 0x00	; 0
    732a:	e9 01       	movw	r28, r18
    732c:	c8 0f       	add	r28, r24
    732e:	d1 1d       	adc	r29, r1
   final=0;
   }
}


void boot_program_page (uint32_t page, uint8_t *buf){
    7330:	12 96       	adiw	r26, 0x02	; 2
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    {
        uint16_t w = *buf++;
        w += (*buf++) << 8;
        boot_page_fill (page + i, w);
    7332:	0e 01       	movw	r0, r28
    7334:	10 93 57 00 	sts	0x0057, r17
    7338:	e8 95       	spm
    733a:	11 24       	eor	r1, r1
    733c:	32 96       	adiw	r30, 0x02	; 2
    cli();
    eeprom_busy_wait ();
    boot_page_erase (page);
    boot_spm_busy_wait (); 
	
    for (i=0; i<SPM_PAGESIZE; i+=2)
    733e:	e6 17       	cp	r30, r22
    7340:	f7 07       	cpc	r31, r23
    7342:	71 f7       	brne	.-36     	; 0x7320 <boot_program_page+0x2e>
        uint16_t w = *buf++;
        w += (*buf++) << 8;
        boot_page_fill (page + i, w);
    }
	
    boot_page_write (page); 
    7344:	85 e0       	ldi	r24, 0x05	; 5
    7346:	fa 01       	movw	r30, r20
    7348:	80 93 57 00 	sts	0x0057, r24
    734c:	e8 95       	spm
    boot_spm_busy_wait();   
    734e:	07 b6       	in	r0, 0x37	; 55
    7350:	00 fc       	sbrc	r0, 0
    7352:	fd cf       	rjmp	.-6      	; 0x734e <boot_program_page+0x5c>
    boot_rww_enable ();
    7354:	81 e1       	ldi	r24, 0x11	; 17
    7356:	80 93 57 00 	sts	0x0057, r24
    735a:	e8 95       	spm
    SREG = sreg;
    735c:	0f bf       	out	0x3f, r16	; 63
}
    735e:	df 91       	pop	r29
    7360:	cf 91       	pop	r28
    7362:	1f 91       	pop	r17
    7364:	0f 91       	pop	r16
    7366:	08 95       	ret

00007368 <ESP_print_dec>:
uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
return UDR0;
}

void ESP_print_dec(uint32_t x){
    7368:	2f 92       	push	r2
    736a:	3f 92       	push	r3
    736c:	4f 92       	push	r4
    736e:	5f 92       	push	r5
    7370:	6f 92       	push	r6
    7372:	7f 92       	push	r7
    7374:	8f 92       	push	r8
    7376:	9f 92       	push	r9
    7378:	af 92       	push	r10
    737a:	bf 92       	push	r11
    737c:	cf 92       	push	r12
    737e:	df 92       	push	r13
    7380:	ef 92       	push	r14
    7382:	ff 92       	push	r15
    7384:	0f 93       	push	r16
    7386:	1f 93       	push	r17
    7388:	df 93       	push	r29
    738a:	cf 93       	push	r28
    738c:	00 d0       	rcall	.+0      	; 0x738e <ESP_print_dec+0x26>
    738e:	cd b7       	in	r28, 0x3d	; 61
    7390:	de b7       	in	r29, 0x3e	; 62
    7392:	7b 01       	movw	r14, r22
    7394:	8c 01       	movw	r16, r24
  uint32_t z=x;
  for(int j=(i-1);j>-1;j--) { num[j]=(z%10)+48; z=z/10;}
  for(uint8_t k=0;k<i;k++)  { ESP_single(num[k]); }
  }
else{ESP_single('0');}
}
    7396:	2d b6       	in	r2, 0x3d	; 61
    7398:	3e b6       	in	r3, 0x3e	; 62
while((UCSR0A & (1<<RXC0))==0);
return UDR0;
}

void ESP_print_dec(uint32_t x){
if(x!=0){
    739a:	61 15       	cp	r22, r1
    739c:	71 05       	cpc	r23, r1
    739e:	81 05       	cpc	r24, r1
    73a0:	91 05       	cpc	r25, r1
    73a2:	09 f4       	brne	.+2      	; 0x73a6 <ESP_print_dec+0x3e>
    73a4:	6d c0       	rjmp	.+218    	; 0x7480 <ESP_print_dec+0x118>
    73a6:	29 82       	std	Y+1, r2	; 0x01
    73a8:	3e b7       	in	r19, 0x3e	; 62
    73aa:	3a 83       	std	Y+2, r19	; 0x02
    73ac:	66 24       	eor	r6, r6
  uint8_t i=0;
  uint32_t y=x;
  while(y!=0){ y=y/10; i++; }
    73ae:	2a e0       	ldi	r18, 0x0A	; 10
    73b0:	30 e0       	ldi	r19, 0x00	; 0
    73b2:	40 e0       	ldi	r20, 0x00	; 0
    73b4:	50 e0       	ldi	r21, 0x00	; 0
    73b6:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    73ba:	c9 01       	movw	r24, r18
    73bc:	da 01       	movw	r26, r20
    73be:	bc 01       	movw	r22, r24
    73c0:	cd 01       	movw	r24, r26
    73c2:	63 94       	inc	r6
    73c4:	61 15       	cp	r22, r1
    73c6:	71 05       	cpc	r23, r1
    73c8:	81 05       	cpc	r24, r1
    73ca:	91 05       	cpc	r25, r1
    73cc:	81 f7       	brne	.-32     	; 0x73ae <ESP_print_dec+0x46>
  uint8_t num[i];
    73ce:	86 2d       	mov	r24, r6
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	ed b7       	in	r30, 0x3d	; 61
    73d4:	fe b7       	in	r31, 0x3e	; 62
    73d6:	e8 1b       	sub	r30, r24
    73d8:	f9 0b       	sbc	r31, r25
    73da:	0f b6       	in	r0, 0x3f	; 63
    73dc:	f8 94       	cli
    73de:	fe bf       	out	0x3e, r31	; 62
    73e0:	0f be       	out	0x3f, r0	; 63
    73e2:	ed bf       	out	0x3d, r30	; 61
    73e4:	4d b6       	in	r4, 0x3d	; 61
    73e6:	5e b6       	in	r5, 0x3e	; 62
    73e8:	08 94       	sec
    73ea:	41 1c       	adc	r4, r1
    73ec:	51 1c       	adc	r5, r1
  uint32_t z=x;
  for(int j=(i-1);j>-1;j--) { num[j]=(z%10)+48; z=z/10;}
    73ee:	6c 01       	movw	r12, r24
    73f0:	08 94       	sec
    73f2:	c1 08       	sbc	r12, r1
    73f4:	d1 08       	sbc	r13, r1
    73f6:	52 01       	movw	r10, r4
    73f8:	ac 0c       	add	r10, r12
    73fa:	bd 1c       	adc	r11, r13
    73fc:	7e 2c       	mov	r7, r14
    73fe:	8f 2c       	mov	r8, r15
    7400:	90 2e       	mov	r9, r16
    7402:	21 c0       	rjmp	.+66     	; 0x7446 <ESP_print_dec+0xde>
    7404:	67 2d       	mov	r22, r7
    7406:	78 2d       	mov	r23, r8
    7408:	89 2d       	mov	r24, r9
    740a:	91 2f       	mov	r25, r17
    740c:	2a e0       	ldi	r18, 0x0A	; 10
    740e:	30 e0       	ldi	r19, 0x00	; 0
    7410:	40 e0       	ldi	r20, 0x00	; 0
    7412:	50 e0       	ldi	r21, 0x00	; 0
    7414:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7418:	60 5d       	subi	r22, 0xD0	; 208
    741a:	f5 01       	movw	r30, r10
    741c:	60 83       	st	Z, r22
    741e:	67 2d       	mov	r22, r7
    7420:	78 2d       	mov	r23, r8
    7422:	89 2d       	mov	r24, r9
    7424:	91 2f       	mov	r25, r17
    7426:	2a e0       	ldi	r18, 0x0A	; 10
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	40 e0       	ldi	r20, 0x00	; 0
    742c:	50 e0       	ldi	r21, 0x00	; 0
    742e:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7432:	72 2e       	mov	r7, r18
    7434:	83 2e       	mov	r8, r19
    7436:	94 2e       	mov	r9, r20
    7438:	15 2f       	mov	r17, r21
    743a:	08 94       	sec
    743c:	c1 08       	sbc	r12, r1
    743e:	d1 08       	sbc	r13, r1
    7440:	08 94       	sec
    7442:	a1 08       	sbc	r10, r1
    7444:	b1 08       	sbc	r11, r1
    7446:	ff ef       	ldi	r31, 0xFF	; 255
    7448:	cf 16       	cp	r12, r31
    744a:	ff ef       	ldi	r31, 0xFF	; 255
    744c:	df 06       	cpc	r13, r31
    744e:	d1 f6       	brne	.-76     	; 0x7404 <ESP_print_dec+0x9c>
    7450:	90 e0       	ldi	r25, 0x00	; 0
    7452:	0b c0       	rjmp	.+22     	; 0x746a <ESP_print_dec+0x102>
  for(uint8_t k=0;k<i;k++)  { ESP_single(num[k]); }
    7454:	f2 01       	movw	r30, r4
    7456:	e9 0f       	add	r30, r25
    7458:	f1 1d       	adc	r31, r1
    745a:	e0 81       	ld	r30, Z
UCSR0C=(1<<UCSZ00)|(1<<UCSZ01);
_delay_ms(100);
}

void ESP_single(unsigned char data){
while((UCSR0A & (1<<UDRE0))==0);
    745c:	80 91 c0 00 	lds	r24, 0x00C0
    7460:	85 ff       	sbrs	r24, 5
    7462:	fc cf       	rjmp	.-8      	; 0x745c <ESP_print_dec+0xf4>
UDR0=data;
    7464:	e0 93 c6 00 	sts	0x00C6, r30
  uint32_t y=x;
  while(y!=0){ y=y/10; i++; }
  uint8_t num[i];
  uint32_t z=x;
  for(int j=(i-1);j>-1;j--) { num[j]=(z%10)+48; z=z/10;}
  for(uint8_t k=0;k<i;k++)  { ESP_single(num[k]); }
    7468:	9f 5f       	subi	r25, 0xFF	; 255
    746a:	96 15       	cp	r25, r6
    746c:	98 f3       	brcs	.-26     	; 0x7454 <ESP_print_dec+0xec>
    746e:	89 81       	ldd	r24, Y+1	; 0x01
    7470:	9a 81       	ldd	r25, Y+2	; 0x02
    7472:	9c 01       	movw	r18, r24
    7474:	0f b6       	in	r0, 0x3f	; 63
    7476:	f8 94       	cli
    7478:	3e bf       	out	0x3e, r19	; 62
    747a:	0f be       	out	0x3f, r0	; 63
    747c:	2d bf       	out	0x3d, r18	; 61
    747e:	07 c0       	rjmp	.+14     	; 0x748e <ESP_print_dec+0x126>
UCSR0C=(1<<UCSZ00)|(1<<UCSZ01);
_delay_ms(100);
}

void ESP_single(unsigned char data){
while((UCSR0A & (1<<UDRE0))==0);
    7480:	80 91 c0 00 	lds	r24, 0x00C0
    7484:	85 ff       	sbrs	r24, 5
    7486:	fc cf       	rjmp	.-8      	; 0x7480 <ESP_print_dec+0x118>
UDR0=data;
    7488:	80 e3       	ldi	r24, 0x30	; 48
    748a:	80 93 c6 00 	sts	0x00C6, r24
  uint32_t z=x;
  for(int j=(i-1);j>-1;j--) { num[j]=(z%10)+48; z=z/10;}
  for(uint8_t k=0;k<i;k++)  { ESP_single(num[k]); }
  }
else{ESP_single('0');}
}
    748e:	0f b6       	in	r0, 0x3f	; 63
    7490:	f8 94       	cli
    7492:	3e be       	out	0x3e, r3	; 62
    7494:	0f be       	out	0x3f, r0	; 63
    7496:	2d be       	out	0x3d, r2	; 61
    7498:	0f 90       	pop	r0
    749a:	0f 90       	pop	r0
    749c:	cf 91       	pop	r28
    749e:	df 91       	pop	r29
    74a0:	1f 91       	pop	r17
    74a2:	0f 91       	pop	r16
    74a4:	ff 90       	pop	r15
    74a6:	ef 90       	pop	r14
    74a8:	df 90       	pop	r13
    74aa:	cf 90       	pop	r12
    74ac:	bf 90       	pop	r11
    74ae:	af 90       	pop	r10
    74b0:	9f 90       	pop	r9
    74b2:	8f 90       	pop	r8
    74b4:	7f 90       	pop	r7
    74b6:	6f 90       	pop	r6
    74b8:	5f 90       	pop	r5
    74ba:	4f 90       	pop	r4
    74bc:	3f 90       	pop	r3
    74be:	2f 90       	pop	r2
    74c0:	08 95       	ret

000074c2 <ESP_print_text>:
void ESP_single(unsigned char data){
while((UCSR0A & (1<<UDRE0))==0);
UDR0=data;
}

void ESP_print_text(char *c){
    74c2:	9c 01       	movw	r18, r24
for(uint8_t i=0;i<strlen(c);i++){
    74c4:	dc 01       	movw	r26, r24
    74c6:	0d 90       	ld	r0, X+
    74c8:	00 20       	and	r0, r0
    74ca:	e9 f7       	brne	.-6      	; 0x74c6 <ESP_print_text+0x4>
    74cc:	11 97       	sbiw	r26, 0x01	; 1
    74ce:	a8 1b       	sub	r26, r24
    74d0:	b9 0b       	sbc	r27, r25
    74d2:	90 e0       	ldi	r25, 0x00	; 0
    74d4:	0a c0       	rjmp	.+20     	; 0x74ea <ESP_print_text+0x28>
   ESP_single(c[i]);
    74d6:	e2 0f       	add	r30, r18
    74d8:	f3 1f       	adc	r31, r19
    74da:	40 81       	ld	r20, Z
UCSR0C=(1<<UCSZ00)|(1<<UCSZ01);
_delay_ms(100);
}

void ESP_single(unsigned char data){
while((UCSR0A & (1<<UDRE0))==0);
    74dc:	80 91 c0 00 	lds	r24, 0x00C0
    74e0:	85 ff       	sbrs	r24, 5
    74e2:	fc cf       	rjmp	.-8      	; 0x74dc <ESP_print_text+0x1a>
UDR0=data;
    74e4:	40 93 c6 00 	sts	0x00C6, r20
}

void ESP_print_text(char *c){
for(uint8_t i=0;i<strlen(c);i++){
    74e8:	9f 5f       	subi	r25, 0xFF	; 255
    74ea:	e9 2f       	mov	r30, r25
    74ec:	f0 e0       	ldi	r31, 0x00	; 0
    74ee:	ea 17       	cp	r30, r26
    74f0:	fb 07       	cpc	r31, r27
    74f2:	88 f3       	brcs	.-30     	; 0x74d6 <ESP_print_text+0x14>
   ESP_single(c[i]);
   }
}
    74f4:	08 95       	ret

000074f6 <read_field>:
_delay_ms(10000);
ESP_print_text("AT+CIPMUX=0");
_delay_ms(1000);
}

void read_field(uint8_t field,uint32_t channel, char c[]){
    74f6:	df 92       	push	r13
    74f8:	ef 92       	push	r14
    74fa:	ff 92       	push	r15
    74fc:	0f 93       	push	r16
    74fe:	1f 93       	push	r17
    7500:	d8 2e       	mov	r13, r24
    7502:	7a 01       	movw	r14, r20
    7504:	8b 01       	movw	r16, r22
ESP_print_text("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
    7506:	80 e0       	ldi	r24, 0x00	; 0
    7508:	91 e0       	ldi	r25, 0x01	; 1
    750a:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
    750e:	80 e2       	ldi	r24, 0x20	; 32
    7510:	9e e4       	ldi	r25, 0x4E	; 78
    7512:	28 ec       	ldi	r18, 0xC8	; 200
    7514:	30 e0       	ldi	r19, 0x00	; 0
    7516:	f9 01       	movw	r30, r18
    7518:	31 97       	sbiw	r30, 0x01	; 1
    751a:	f1 f7       	brne	.-4      	; 0x7518 <read_field+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    751c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    751e:	d9 f7       	brne	.-10     	; 0x7516 <read_field+0x20>
_delay_ms(2000);
ESP_print_text("AT+CIPSEND=");
    7520:	8c e2       	ldi	r24, 0x2C	; 44
    7522:	91 e0       	ldi	r25, 0x01	; 1
    7524:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_dec(71+field/10);
    7528:	8d 2d       	mov	r24, r13
    752a:	6a e0       	ldi	r22, 0x0A	; 10
    752c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__udivmodqi4>
    7530:	90 e0       	ldi	r25, 0x00	; 0
    7532:	89 5b       	subi	r24, 0xB9	; 185
    7534:	9f 4f       	sbci	r25, 0xFF	; 255
    7536:	aa 27       	eor	r26, r26
    7538:	97 fd       	sbrc	r25, 7
    753a:	a0 95       	com	r26
    753c:	ba 2f       	mov	r27, r26
    753e:	bc 01       	movw	r22, r24
    7540:	cd 01       	movw	r24, r26
    7542:	0e 94 b4 39 	call	0x7368	; 0x7368 <ESP_print_dec>
ESP_print_text("\r\n");
    7546:	88 e3       	ldi	r24, 0x38	; 56
    7548:	91 e0       	ldi	r25, 0x01	; 1
    754a:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
    754e:	80 e2       	ldi	r24, 0x20	; 32
    7550:	9e e4       	ldi	r25, 0x4E	; 78
    7552:	28 ec       	ldi	r18, 0xC8	; 200
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	f9 01       	movw	r30, r18
    7558:	31 97       	sbiw	r30, 0x01	; 1
    755a:	f1 f7       	brne	.-4      	; 0x7558 <read_field+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    755c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    755e:	d9 f7       	brne	.-10     	; 0x7556 <read_field+0x60>
_delay_ms(2000);
ESP_print_text("GET /channels/");
    7560:	8b e3       	ldi	r24, 0x3B	; 59
    7562:	91 e0       	ldi	r25, 0x01	; 1
    7564:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_dec(channel);
    7568:	c8 01       	movw	r24, r16
    756a:	b7 01       	movw	r22, r14
    756c:	0e 94 b4 39 	call	0x7368	; 0x7368 <ESP_print_dec>
ESP_print_text("/fields/");
    7570:	8a e4       	ldi	r24, 0x4A	; 74
    7572:	91 e0       	ldi	r25, 0x01	; 1
    7574:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_dec(field);
    7578:	6d 2d       	mov	r22, r13
    757a:	70 e0       	ldi	r23, 0x00	; 0
    757c:	80 e0       	ldi	r24, 0x00	; 0
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	0e 94 b4 39 	call	0x7368	; 0x7368 <ESP_print_dec>
ESP_print_text(".csv?api_key=");
    7584:	83 e5       	ldi	r24, 0x53	; 83
    7586:	91 e0       	ldi	r25, 0x01	; 1
    7588:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_text(API);
    758c:	81 e6       	ldi	r24, 0x61	; 97
    758e:	91 e0       	ldi	r25, 0x01	; 1
    7590:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_text("&results=16\r\n");
    7594:	82 e7       	ldi	r24, 0x72	; 114
    7596:	91 e0       	ldi	r25, 0x01	; 1
    7598:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
}
    759c:	1f 91       	pop	r17
    759e:	0f 91       	pop	r16
    75a0:	ff 90       	pop	r15
    75a2:	ef 90       	pop	r14
    75a4:	df 90       	pop	r13
    75a6:	08 95       	ret

000075a8 <read_data>:
uint32_t mpl_val=1;
for(uint8_t i=0;i<dgt;i++){mpl_val*=10;}
return mpl_val;
}

void read_data(uint8_t field){
    75a8:	2f 92       	push	r2
    75aa:	3f 92       	push	r3
    75ac:	4f 92       	push	r4
    75ae:	5f 92       	push	r5
    75b0:	7f 92       	push	r7
    75b2:	8f 92       	push	r8
    75b4:	9f 92       	push	r9
    75b6:	af 92       	push	r10
    75b8:	bf 92       	push	r11
    75ba:	cf 92       	push	r12
    75bc:	df 92       	push	r13
    75be:	ef 92       	push	r14
    75c0:	ff 92       	push	r15
    75c2:	0f 93       	push	r16
    75c4:	1f 93       	push	r17
    75c6:	df 93       	push	r29
    75c8:	cf 93       	push	r28
    75ca:	cd b7       	in	r28, 0x3d	; 61
    75cc:	de b7       	in	r29, 0x3e	; 62
    75ce:	60 97       	sbiw	r28, 0x10	; 16
    75d0:	0f b6       	in	r0, 0x3f	; 63
    75d2:	f8 94       	cli
    75d4:	de bf       	out	0x3e, r29	; 62
    75d6:	0f be       	out	0x3f, r0	; 63
    75d8:	cd bf       	out	0x3d, r28	; 61
uint8_t entry=0;
uint8_t temp=0,bits=0,parameters[16];
uint32_t final=0;

read_field(field,CHANNEL,API);
    75da:	4f e4       	ldi	r20, 0x4F	; 79
    75dc:	5a e5       	ldi	r21, 0x5A	; 90
    75de:	6d e0       	ldi	r22, 0x0D	; 13
    75e0:	70 e0       	ldi	r23, 0x00	; 0
    75e2:	21 e6       	ldi	r18, 0x61	; 97
    75e4:	31 e0       	ldi	r19, 0x01	; 1
    75e6:	0e 94 7b 3a 	call	0x74f6	; 0x74f6 <read_field>
    75ea:	40 e0       	ldi	r20, 0x00	; 0
    75ec:	50 e0       	ldi	r21, 0x00	; 0
if(temp!=44){goto ENTRY;}

DATA:
temp=ESP_rx();
if(temp!=10){data_array[entry][bits]=temp-48;bits++;goto DATA;}
parameters[entry]=bits;
    75ee:	be 01       	movw	r22, r28
    75f0:	6f 5f       	subi	r22, 0xFF	; 255
    75f2:	7f 4f       	sbci	r23, 0xFF	; 255
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    75f4:	80 91 c0 00 	lds	r24, 0x00C0
    75f8:	87 ff       	sbrs	r24, 7
    75fa:	fc cf       	rjmp	.-8      	; 0x75f4 <read_data+0x4c>
return UDR0;
    75fc:	80 91 c6 00 	lds	r24, 0x00C6

read_field(field,CHANNEL,API);

START:
bits=0;
while(ESP_rx()!='U');
    7600:	85 35       	cpi	r24, 0x55	; 85
    7602:	c1 f7       	brne	.-16     	; 0x75f4 <read_data+0x4c>
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    7604:	80 91 c0 00 	lds	r24, 0x00C0
    7608:	87 ff       	sbrs	r24, 7
    760a:	fc cf       	rjmp	.-8      	; 0x7604 <read_data+0x5c>
return UDR0;
    760c:	80 91 c6 00 	lds	r24, 0x00C6
read_field(field,CHANNEL,API);

START:
bits=0;
while(ESP_rx()!='U');
while(ESP_rx()!='T');
    7610:	84 35       	cpi	r24, 0x54	; 84
    7612:	c1 f7       	brne	.-16     	; 0x7604 <read_data+0x5c>
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    7614:	80 91 c0 00 	lds	r24, 0x00C0
    7618:	87 ff       	sbrs	r24, 7
    761a:	fc cf       	rjmp	.-8      	; 0x7614 <read_data+0x6c>
return UDR0;
    761c:	80 91 c6 00 	lds	r24, 0x00C6

START:
bits=0;
while(ESP_rx()!='U');
while(ESP_rx()!='T');
while(ESP_rx()!='C');
    7620:	83 34       	cpi	r24, 0x43	; 67
    7622:	c1 f7       	brne	.-16     	; 0x7614 <read_data+0x6c>
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    7624:	80 91 c0 00 	lds	r24, 0x00C0
    7628:	87 ff       	sbrs	r24, 7
    762a:	fc cf       	rjmp	.-8      	; 0x7624 <read_data+0x7c>
return UDR0;
    762c:	80 91 c6 00 	lds	r24, 0x00C6
START:
bits=0;
while(ESP_rx()!='U');
while(ESP_rx()!='T');
while(ESP_rx()!='C');
while(ESP_rx()!=',');
    7630:	8c 32       	cpi	r24, 0x2C	; 44
    7632:	c1 f7       	brne	.-16     	; 0x7624 <read_data+0x7c>
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    7634:	80 91 c0 00 	lds	r24, 0x00C0
    7638:	87 ff       	sbrs	r24, 7
    763a:	fc cf       	rjmp	.-8      	; 0x7634 <read_data+0x8c>
return UDR0;
    763c:	80 91 c6 00 	lds	r24, 0x00C6
while(ESP_rx()!='C');
while(ESP_rx()!=',');

ENTRY:
temp=ESP_rx();
if(temp!=44){goto ENTRY;}
    7640:	8c 32       	cpi	r24, 0x2C	; 44
    7642:	c1 f7       	brne	.-16     	; 0x7634 <read_data+0x8c>
    7644:	90 e0       	ldi	r25, 0x00	; 0

DATA:
temp=ESP_rx();
if(temp!=10){data_array[entry][bits]=temp-48;bits++;goto DATA;}
    7646:	9a 01       	movw	r18, r20
    7648:	22 0f       	add	r18, r18
    764a:	33 1f       	adc	r19, r19
    764c:	24 0f       	add	r18, r20
    764e:	35 1f       	adc	r19, r21
    7650:	22 0f       	add	r18, r18
    7652:	33 1f       	adc	r19, r19
   ESP_single(c[i]);
   }
}

uint8_t ESP_rx(void){
while((UCSR0A & (1<<RXC0))==0);
    7654:	80 91 c0 00 	lds	r24, 0x00C0
    7658:	87 ff       	sbrs	r24, 7
    765a:	fc cf       	rjmp	.-8      	; 0x7654 <read_data+0xac>
return UDR0;
    765c:	80 91 c6 00 	lds	r24, 0x00C6
temp=ESP_rx();
if(temp!=44){goto ENTRY;}

DATA:
temp=ESP_rx();
if(temp!=10){data_array[entry][bits]=temp-48;bits++;goto DATA;}
    7660:	8a 30       	cpi	r24, 0x0A	; 10
    7662:	49 f0       	breq	.+18     	; 0x7676 <read_data+0xce>
    7664:	f9 01       	movw	r30, r18
    7666:	e9 0f       	add	r30, r25
    7668:	f1 1d       	adc	r31, r1
    766a:	e2 5d       	subi	r30, 0xD2	; 210
    766c:	fd 4f       	sbci	r31, 0xFD	; 253
    766e:	80 53       	subi	r24, 0x30	; 48
    7670:	80 83       	st	Z, r24
    7672:	9f 5f       	subi	r25, 0xFF	; 255
    7674:	ef cf       	rjmp	.-34     	; 0x7654 <read_data+0xac>
parameters[entry]=bits;
    7676:	fb 01       	movw	r30, r22
    7678:	e4 0f       	add	r30, r20
    767a:	f5 1f       	adc	r31, r21
    767c:	90 83       	st	Z, r25
    767e:	4f 5f       	subi	r20, 0xFF	; 255
    7680:	5f 4f       	sbci	r21, 0xFF	; 255

entry++;
if(entry<16){goto START;}
    7682:	40 31       	cpi	r20, 0x10	; 16
    7684:	51 05       	cpc	r21, r1
    7686:	09 f0       	breq	.+2      	; 0x768a <read_data+0xe2>
    7688:	b5 cf       	rjmp	.-150    	; 0x75f4 <read_data+0x4c>
    768a:	4e e2       	ldi	r20, 0x2E	; 46
    768c:	44 2e       	mov	r4, r20
    768e:	44 e0       	ldi	r20, 0x04	; 4
    7690:	54 2e       	mov	r5, r20
    7692:	aa 24       	eor	r10, r10
    7694:	bb 24       	eor	r11, r11

for(uint8_t ent=0;ent<16;ent++){
   for(uint8_t i=0;i<parameters[ent];i++){final+=data_array[ent][i]*mpl(parameters[ent]-1-i);}
    7696:	1e 01       	movw	r2, r28
    7698:	08 94       	sec
    769a:	21 1c       	adc	r2, r1
    769c:	31 1c       	adc	r3, r1
    769e:	2e c0       	rjmp	.+92     	; 0x76fc <read_data+0x154>
    76a0:	f8 01       	movw	r30, r16
    76a2:	70 80       	ld	r7, Z
    76a4:	99 24       	eor	r9, r9
    76a6:	61 e0       	ldi	r22, 0x01	; 1
    76a8:	70 e0       	ldi	r23, 0x00	; 0
    76aa:	80 e0       	ldi	r24, 0x00	; 0
    76ac:	90 e0       	ldi	r25, 0x00	; 0
    76ae:	07 c0       	rjmp	.+14     	; 0x76be <read_data+0x116>
}


uint32_t mpl(uint8_t dgt){
uint32_t mpl_val=1;
for(uint8_t i=0;i<dgt;i++){mpl_val*=10;}
    76b0:	2a e0       	ldi	r18, 0x0A	; 10
    76b2:	30 e0       	ldi	r19, 0x00	; 0
    76b4:	40 e0       	ldi	r20, 0x00	; 0
    76b6:	50 e0       	ldi	r21, 0x00	; 0
    76b8:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__mulsi3>
    76bc:	93 94       	inc	r9
    76be:	98 14       	cp	r9, r8
    76c0:	b8 f3       	brcs	.-18     	; 0x76b0 <read_data+0x108>

entry++;
if(entry<16){goto START;}

for(uint8_t ent=0;ent<16;ent++){
   for(uint8_t i=0;i<parameters[ent];i++){final+=data_array[ent][i]*mpl(parameters[ent]-1-i);}
    76c2:	27 2d       	mov	r18, r7
    76c4:	30 e0       	ldi	r19, 0x00	; 0
    76c6:	40 e0       	ldi	r20, 0x00	; 0
    76c8:	50 e0       	ldi	r21, 0x00	; 0
    76ca:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__mulsi3>
    76ce:	c6 0e       	add	r12, r22
    76d0:	d7 1e       	adc	r13, r23
    76d2:	e8 1e       	adc	r14, r24
    76d4:	f9 1e       	adc	r15, r25
    76d6:	8a 94       	dec	r8
    76d8:	0f 5f       	subi	r16, 0xFF	; 255
    76da:	1f 4f       	sbci	r17, 0xFF	; 255
    76dc:	ff ef       	ldi	r31, 0xFF	; 255
    76de:	8f 16       	cp	r8, r31
    76e0:	f9 f6       	brne	.-66     	; 0x76a0 <read_data+0xf8>
   final_data[ent]=final;
    76e2:	f2 01       	movw	r30, r4
    76e4:	c1 92       	st	Z+, r12
    76e6:	d1 92       	st	Z+, r13
    76e8:	e1 92       	st	Z+, r14
    76ea:	f1 92       	st	Z+, r15
    76ec:	2f 01       	movw	r4, r30
    76ee:	08 94       	sec
    76f0:	a1 1c       	adc	r10, r1
    76f2:	b1 1c       	adc	r11, r1
parameters[entry]=bits;

entry++;
if(entry<16){goto START;}

for(uint8_t ent=0;ent<16;ent++){
    76f4:	f0 e1       	ldi	r31, 0x10	; 16
    76f6:	af 16       	cp	r10, r31
    76f8:	b1 04       	cpc	r11, r1
    76fa:	91 f0       	breq	.+36     	; 0x7720 <read_data+0x178>
   for(uint8_t i=0;i<parameters[ent];i++){final+=data_array[ent][i]*mpl(parameters[ent]-1-i);}
    76fc:	f1 01       	movw	r30, r2
    76fe:	ea 0d       	add	r30, r10
    7700:	fb 1d       	adc	r31, r11
    7702:	80 80       	ld	r8, Z
    7704:	8a 94       	dec	r8
    7706:	85 01       	movw	r16, r10
    7708:	00 0f       	add	r16, r16
    770a:	11 1f       	adc	r17, r17
    770c:	0a 0d       	add	r16, r10
    770e:	1b 1d       	adc	r17, r11
    7710:	00 0f       	add	r16, r16
    7712:	11 1f       	adc	r17, r17
    7714:	02 5d       	subi	r16, 0xD2	; 210
    7716:	1d 4f       	sbci	r17, 0xFD	; 253
    7718:	cc 24       	eor	r12, r12
    771a:	dd 24       	eor	r13, r13
    771c:	76 01       	movw	r14, r12
    771e:	de cf       	rjmp	.-68     	; 0x76dc <read_data+0x134>
   final_data[ent]=final;
   final=0;
   }
}
    7720:	60 96       	adiw	r28, 0x10	; 16
    7722:	0f b6       	in	r0, 0x3f	; 63
    7724:	f8 94       	cli
    7726:	de bf       	out	0x3e, r29	; 62
    7728:	0f be       	out	0x3f, r0	; 63
    772a:	cd bf       	out	0x3d, r28	; 61
    772c:	cf 91       	pop	r28
    772e:	df 91       	pop	r29
    7730:	1f 91       	pop	r17
    7732:	0f 91       	pop	r16
    7734:	ff 90       	pop	r15
    7736:	ef 90       	pop	r14
    7738:	df 90       	pop	r13
    773a:	cf 90       	pop	r12
    773c:	bf 90       	pop	r11
    773e:	af 90       	pop	r10
    7740:	9f 90       	pop	r9
    7742:	8f 90       	pop	r8
    7744:	7f 90       	pop	r7
    7746:	5f 90       	pop	r5
    7748:	4f 90       	pop	r4
    774a:	3f 90       	pop	r3
    774c:	2f 90       	pop	r2
    774e:	08 95       	ret

00007750 <connect_wifi>:
  }
else{ESP_single('0');}
}

void connect_wifi(void){
ESP_print_text("AT+CWMODE=3");
    7750:	80 e8       	ldi	r24, 0x80	; 128
    7752:	91 e0       	ldi	r25, 0x01	; 1
    7754:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
    7758:	80 e1       	ldi	r24, 0x10	; 16
    775a:	97 e2       	ldi	r25, 0x27	; 39
    775c:	28 ec       	ldi	r18, 0xC8	; 200
    775e:	30 e0       	ldi	r19, 0x00	; 0
    7760:	f9 01       	movw	r30, r18
    7762:	31 97       	sbiw	r30, 0x01	; 1
    7764:	f1 f7       	brne	.-4      	; 0x7762 <connect_wifi+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7766:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7768:	d9 f7       	brne	.-10     	; 0x7760 <connect_wifi+0x10>
_delay_ms(1000);
ESP_print_text("AT+CWJAP=\"");
    776a:	8c e8       	ldi	r24, 0x8C	; 140
    776c:	91 e0       	ldi	r25, 0x01	; 1
    776e:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_text(WIFI_NAME);
    7772:	87 e9       	ldi	r24, 0x97	; 151
    7774:	91 e0       	ldi	r25, 0x01	; 1
    7776:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_text("\",\"");
    777a:	84 ea       	ldi	r24, 0xA4	; 164
    777c:	91 e0       	ldi	r25, 0x01	; 1
    777e:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_text(WIFI_PASS);
    7782:	88 ea       	ldi	r24, 0xA8	; 168
    7784:	91 e0       	ldi	r25, 0x01	; 1
    7786:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
ESP_print_text("\"\r\n");
    778a:	85 eb       	ldi	r24, 0xB5	; 181
    778c:	91 e0       	ldi	r25, 0x01	; 1
    778e:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
    7792:	8f ef       	ldi	r24, 0xFF	; 255
    7794:	9f ef       	ldi	r25, 0xFF	; 255
    7796:	28 ec       	ldi	r18, 0xC8	; 200
    7798:	30 e0       	ldi	r19, 0x00	; 0
    779a:	f9 01       	movw	r30, r18
    779c:	31 97       	sbiw	r30, 0x01	; 1
    779e:	f1 f7       	brne	.-4      	; 0x779c <connect_wifi+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77a2:	d9 f7       	brne	.-10     	; 0x779a <connect_wifi+0x4a>
_delay_ms(10000);
ESP_print_text("AT+CIPMUX=0");
    77a4:	89 eb       	ldi	r24, 0xB9	; 185
    77a6:	91 e0       	ldi	r25, 0x01	; 1
    77a8:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <ESP_print_text>
    77ac:	80 e1       	ldi	r24, 0x10	; 16
    77ae:	97 e2       	ldi	r25, 0x27	; 39
    77b0:	28 ec       	ldi	r18, 0xC8	; 200
    77b2:	30 e0       	ldi	r19, 0x00	; 0
    77b4:	f9 01       	movw	r30, r18
    77b6:	31 97       	sbiw	r30, 0x01	; 1
    77b8:	f1 f7       	brne	.-4      	; 0x77b6 <connect_wifi+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77bc:	d9 f7       	brne	.-10     	; 0x77b4 <connect_wifi+0x64>
_delay_ms(1000);
}
    77be:	08 95       	ret

000077c0 <dbg_print_text>:
for(uint8_t i=0;i<10;i++){data(tmp[i]);_delay_us(DEBUG_DELAY);}
_delay_us(DEBUG_DELAY*2);
}

/*For printing text use this function*/
void dbg_print_text(char *c){
    77c0:	ff 92       	push	r15
    77c2:	0f 93       	push	r16
    77c4:	1f 93       	push	r17
    77c6:	cf 93       	push	r28
    77c8:	df 93       	push	r29
    77ca:	8c 01       	movw	r16, r24
    77cc:	88 ec       	ldi	r24, 0xC8	; 200
    77ce:	90 e0       	ldi	r25, 0x00	; 0
    77d0:	01 97       	sbiw	r24, 0x01	; 1
    77d2:	f1 f7       	brne	.-4      	; 0x77d0 <dbg_print_text+0x10>
dbg_enable();
    77d4:	52 9a       	sbi	0x0a, 2	; 10
    77d6:	ff 24       	eor	r15, r15
    77d8:	06 c0       	rjmp	.+12     	; 0x77e6 <dbg_print_text+0x26>
for(uint8_t i=0;i<strlen(c);i++){dbg_single_byte(c[i]);}
    77da:	c0 0f       	add	r28, r16
    77dc:	d1 1f       	adc	r29, r17
    77de:	88 81       	ld	r24, Y
    77e0:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <dbg_single_byte>
    77e4:	f3 94       	inc	r15
    77e6:	cf 2d       	mov	r28, r15
    77e8:	d0 e0       	ldi	r29, 0x00	; 0
    77ea:	f8 01       	movw	r30, r16
    77ec:	01 90       	ld	r0, Z+
    77ee:	00 20       	and	r0, r0
    77f0:	e9 f7       	brne	.-6      	; 0x77ec <dbg_print_text+0x2c>
    77f2:	31 97       	sbiw	r30, 0x01	; 1
    77f4:	e0 1b       	sub	r30, r16
    77f6:	f1 0b       	sbc	r31, r17
    77f8:	ce 17       	cp	r28, r30
    77fa:	df 07       	cpc	r29, r31
    77fc:	70 f3       	brcs	.-36     	; 0x77da <dbg_print_text+0x1a>
dbg_disable();
    77fe:	52 98       	cbi	0x0a, 2	; 10
}
    7800:	df 91       	pop	r29
    7802:	cf 91       	pop	r28
    7804:	1f 91       	pop	r17
    7806:	0f 91       	pop	r16
    7808:	ff 90       	pop	r15
    780a:	08 95       	ret

0000780c <boot_write_pages>:
    boot_spm_busy_wait();   
    boot_rww_enable ();
    SREG = sreg;
}

void boot_write_pages(void){
    780c:	6f 92       	push	r6
    780e:	7f 92       	push	r7
    7810:	9f 92       	push	r9
    7812:	af 92       	push	r10
    7814:	bf 92       	push	r11
    7816:	cf 92       	push	r12
    7818:	df 92       	push	r13
    781a:	ef 92       	push	r14
    781c:	ff 92       	push	r15
    781e:	0f 93       	push	r16
    7820:	1f 93       	push	r17
    7822:	cf 93       	push	r28
    7824:	df 93       	push	r29
dbg_print_text("\n");
    7826:	85 ec       	ldi	r24, 0xC5	; 197
    7828:	91 e0       	ldi	r25, 0x01	; 1
    782a:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
dbg_print_text("|========|");
    782e:	87 ec       	ldi	r24, 0xC7	; 199
    7830:	91 e0       	ldi	r25, 0x01	; 1
    7832:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
 dbg_print_text("\n|");
    7836:	82 ed       	ldi	r24, 0xD2	; 210
    7838:	91 e0       	ldi	r25, 0x01	; 1
    783a:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
    783e:	99 24       	eor	r9, r9
    7840:	aa 24       	eor	r10, r10
    7842:	bb 24       	eor	r11, r11
    7844:	88 ec       	ldi	r24, 0xC8	; 200
    7846:	68 2e       	mov	r6, r24
    7848:	71 2c       	mov	r7, r1
for(uint8_t i=0;i<4;i++){
 read_data(i+1);
    784a:	93 94       	inc	r9
    784c:	89 2d       	mov	r24, r9
    784e:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <read_data>
 dbg_print_text("=");
    7852:	85 ed       	ldi	r24, 0xD5	; 213
    7854:	91 e0       	ldi	r25, 0x01	; 1
    7856:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
    785a:	e5 01       	movw	r28, r10
    785c:	c2 55       	subi	r28, 0x52	; 82
    785e:	dc 4f       	sbci	r29, 0xFC	; 252
    7860:	0e e2       	ldi	r16, 0x2E	; 46
    7862:	c0 2e       	mov	r12, r16
    7864:	04 e0       	ldi	r16, 0x04	; 4
    7866:	d0 2e       	mov	r13, r16
 for(uint8_t k=0;k<16;k++){boot_buffer[(2*k)+(32*i)]=final_data[k]/1000;boot_buffer[(2*k)+1+(32*i)]=final_data[k]%1000;}
    7868:	f6 01       	movw	r30, r12
    786a:	e1 90       	ld	r14, Z+
    786c:	f1 90       	ld	r15, Z+
    786e:	01 91       	ld	r16, Z+
    7870:	11 91       	ld	r17, Z+
    7872:	6f 01       	movw	r12, r30
    7874:	c8 01       	movw	r24, r16
    7876:	b7 01       	movw	r22, r14
    7878:	28 ee       	ldi	r18, 0xE8	; 232
    787a:	33 e0       	ldi	r19, 0x03	; 3
    787c:	40 e0       	ldi	r20, 0x00	; 0
    787e:	50 e0       	ldi	r21, 0x00	; 0
    7880:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7884:	28 83       	st	Y, r18
    7886:	c8 01       	movw	r24, r16
    7888:	b7 01       	movw	r22, r14
    788a:	28 ee       	ldi	r18, 0xE8	; 232
    788c:	33 e0       	ldi	r19, 0x03	; 3
    788e:	40 e0       	ldi	r20, 0x00	; 0
    7890:	50 e0       	ldi	r21, 0x00	; 0
    7892:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7896:	69 83       	std	Y+1, r22	; 0x01
    7898:	22 96       	adiw	r28, 0x02	; 2
    789a:	fe e6       	ldi	r31, 0x6E	; 110
    789c:	cf 16       	cp	r12, r31
    789e:	f4 e0       	ldi	r31, 0x04	; 4
    78a0:	df 06       	cpc	r13, r31
    78a2:	11 f7       	brne	.-60     	; 0x7868 <boot_write_pages+0x5c>
    78a4:	80 e2       	ldi	r24, 0x20	; 32
    78a6:	9e e4       	ldi	r25, 0x4E	; 78
    78a8:	f3 01       	movw	r30, r6
    78aa:	31 97       	sbiw	r30, 0x01	; 1
    78ac:	f1 f7       	brne	.-4      	; 0x78aa <boot_write_pages+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78b0:	d9 f7       	brne	.-10     	; 0x78a8 <boot_write_pages+0x9c>
    78b2:	80 e2       	ldi	r24, 0x20	; 32
    78b4:	90 e0       	ldi	r25, 0x00	; 0
    78b6:	a8 0e       	add	r10, r24
    78b8:	b9 1e       	adc	r11, r25

void boot_write_pages(void){
dbg_print_text("\n");
dbg_print_text("|========|");
 dbg_print_text("\n|");
for(uint8_t i=0;i<4;i++){
    78ba:	94 e0       	ldi	r25, 0x04	; 4
    78bc:	99 16       	cp	r9, r25
    78be:	29 f6       	brne	.-118    	; 0x784a <boot_write_pages+0x3e>
 read_data(i+1);
 dbg_print_text("=");
 for(uint8_t k=0;k<16;k++){boot_buffer[(2*k)+(32*i)]=final_data[k]/1000;boot_buffer[(2*k)+1+(32*i)]=final_data[k]%1000;}
 _delay_ms(2000);
 }
 boot_program_page(0*128,boot_buffer);
    78c0:	60 e0       	ldi	r22, 0x00	; 0
    78c2:	70 e0       	ldi	r23, 0x00	; 0
    78c4:	80 e0       	ldi	r24, 0x00	; 0
    78c6:	90 e0       	ldi	r25, 0x00	; 0
    78c8:	4e ea       	ldi	r20, 0xAE	; 174
    78ca:	53 e0       	ldi	r21, 0x03	; 3
    78cc:	0e 94 79 39 	call	0x72f2	; 0x72f2 <boot_program_page>
    78d0:	15 e0       	ldi	r17, 0x05	; 5
    78d2:	91 2e       	mov	r9, r17
    78d4:	aa 24       	eor	r10, r10
    78d6:	bb 24       	eor	r11, r11
    78d8:	b8 ec       	ldi	r27, 0xC8	; 200
    78da:	6b 2e       	mov	r6, r27
    78dc:	71 2c       	mov	r7, r1
 
 for(uint8_t i=0;i<4;i++){
 read_data(i+5);
    78de:	89 2d       	mov	r24, r9
    78e0:	0e 94 d4 3a 	call	0x75a8	; 0x75a8 <read_data>
 dbg_print_text("=");
    78e4:	85 ed       	ldi	r24, 0xD5	; 213
    78e6:	91 e0       	ldi	r25, 0x01	; 1
    78e8:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
    78ec:	e5 01       	movw	r28, r10
    78ee:	c2 55       	subi	r28, 0x52	; 82
    78f0:	dc 4f       	sbci	r29, 0xFC	; 252
    78f2:	ae e2       	ldi	r26, 0x2E	; 46
    78f4:	ca 2e       	mov	r12, r26
    78f6:	a4 e0       	ldi	r26, 0x04	; 4
    78f8:	da 2e       	mov	r13, r26
 for(uint8_t k=0;k<16;k++){boot_buffer[(2*k)+(32*i)]=final_data[k]/1000;boot_buffer[(2*k)+1+(32*i)]=final_data[k]%1000;}
    78fa:	f6 01       	movw	r30, r12
    78fc:	e1 90       	ld	r14, Z+
    78fe:	f1 90       	ld	r15, Z+
    7900:	01 91       	ld	r16, Z+
    7902:	11 91       	ld	r17, Z+
    7904:	6f 01       	movw	r12, r30
    7906:	c8 01       	movw	r24, r16
    7908:	b7 01       	movw	r22, r14
    790a:	28 ee       	ldi	r18, 0xE8	; 232
    790c:	33 e0       	ldi	r19, 0x03	; 3
    790e:	40 e0       	ldi	r20, 0x00	; 0
    7910:	50 e0       	ldi	r21, 0x00	; 0
    7912:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7916:	28 83       	st	Y, r18
    7918:	c8 01       	movw	r24, r16
    791a:	b7 01       	movw	r22, r14
    791c:	28 ee       	ldi	r18, 0xE8	; 232
    791e:	33 e0       	ldi	r19, 0x03	; 3
    7920:	40 e0       	ldi	r20, 0x00	; 0
    7922:	50 e0       	ldi	r21, 0x00	; 0
    7924:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <__udivmodsi4>
    7928:	69 83       	std	Y+1, r22	; 0x01
    792a:	22 96       	adiw	r28, 0x02	; 2
    792c:	fe e6       	ldi	r31, 0x6E	; 110
    792e:	cf 16       	cp	r12, r31
    7930:	f4 e0       	ldi	r31, 0x04	; 4
    7932:	df 06       	cpc	r13, r31
    7934:	11 f7       	brne	.-60     	; 0x78fa <boot_write_pages+0xee>
    7936:	80 e2       	ldi	r24, 0x20	; 32
    7938:	9e e4       	ldi	r25, 0x4E	; 78
    793a:	f3 01       	movw	r30, r6
    793c:	31 97       	sbiw	r30, 0x01	; 1
    793e:	f1 f7       	brne	.-4      	; 0x793c <boot_write_pages+0x130>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7940:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7942:	d9 f7       	brne	.-10     	; 0x793a <boot_write_pages+0x12e>
    7944:	93 94       	inc	r9
    7946:	80 e2       	ldi	r24, 0x20	; 32
    7948:	90 e0       	ldi	r25, 0x00	; 0
    794a:	a8 0e       	add	r10, r24
    794c:	b9 1e       	adc	r11, r25
 for(uint8_t k=0;k<16;k++){boot_buffer[(2*k)+(32*i)]=final_data[k]/1000;boot_buffer[(2*k)+1+(32*i)]=final_data[k]%1000;}
 _delay_ms(2000);
 }
 boot_program_page(0*128,boot_buffer);
 
 for(uint8_t i=0;i<4;i++){
    794e:	99 e0       	ldi	r25, 0x09	; 9
    7950:	99 16       	cp	r9, r25
    7952:	29 f6       	brne	.-118    	; 0x78de <boot_write_pages+0xd2>
 read_data(i+5);
 dbg_print_text("=");
 for(uint8_t k=0;k<16;k++){boot_buffer[(2*k)+(32*i)]=final_data[k]/1000;boot_buffer[(2*k)+1+(32*i)]=final_data[k]%1000;}
 _delay_ms(2000);
 }
 dbg_print_text("|");
    7954:	87 ed       	ldi	r24, 0xD7	; 215
    7956:	91 e0       	ldi	r25, 0x01	; 1
    7958:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
 
 boot_program_page(1*128,boot_buffer);
    795c:	60 e8       	ldi	r22, 0x80	; 128
    795e:	70 e0       	ldi	r23, 0x00	; 0
    7960:	80 e0       	ldi	r24, 0x00	; 0
    7962:	90 e0       	ldi	r25, 0x00	; 0
    7964:	4e ea       	ldi	r20, 0xAE	; 174
    7966:	53 e0       	ldi	r21, 0x03	; 3
    7968:	0e 94 79 39 	call	0x72f2	; 0x72f2 <boot_program_page>
 dbg_print_text("\nProgram download complete!\nJumping to app!\n");
    796c:	89 ed       	ldi	r24, 0xD9	; 217
    796e:	91 e0       	ldi	r25, 0x01	; 1
    7970:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
 JUMP_APP();
    7974:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    7978:	df 91       	pop	r29
    797a:	cf 91       	pop	r28
    797c:	1f 91       	pop	r17
    797e:	0f 91       	pop	r16
    7980:	ff 90       	pop	r15
    7982:	ef 90       	pop	r14
    7984:	df 90       	pop	r13
    7986:	cf 90       	pop	r12
    7988:	bf 90       	pop	r11
    798a:	af 90       	pop	r10
    798c:	9f 90       	pop	r9
    798e:	7f 90       	pop	r7
    7990:	6f 90       	pop	r6
    7992:	08 95       	ret

00007994 <main>:



int main(void){

ESP_init(9600);
    7994:	60 e8       	ldi	r22, 0x80	; 128
    7996:	75 e2       	ldi	r23, 0x25	; 37
    7998:	80 e0       	ldi	r24, 0x00	; 0
    799a:	90 e0       	ldi	r25, 0x00	; 0
    799c:	0e 94 28 39 	call	0x7250	; 0x7250 <ESP_init>
    79a0:	20 e5       	ldi	r18, 0x50	; 80
    79a2:	33 ec       	ldi	r19, 0xC3	; 195
    79a4:	48 ec       	ldi	r20, 0xC8	; 200
    79a6:	50 e0       	ldi	r21, 0x00	; 0
    79a8:	ca 01       	movw	r24, r20
    79aa:	01 97       	sbiw	r24, 0x01	; 1
    79ac:	f1 f7       	brne	.-4      	; 0x79aa <main+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    79ae:	21 50       	subi	r18, 0x01	; 1
    79b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79b2:	d1 f7       	brne	.-12     	; 0x79a8 <main+0x14>
    79b4:	88 ec       	ldi	r24, 0xC8	; 200
    79b6:	90 e0       	ldi	r25, 0x00	; 0
    79b8:	01 97       	sbiw	r24, 0x01	; 1
    79ba:	f1 f7       	brne	.-4      	; 0x79b8 <main+0x24>
_delay_ms(5000);
dbg_enable();
    79bc:	52 9a       	sbi	0x0a, 2	; 10
dbg_print_text("\n\n\nDownloading firmware from internet!\n");
    79be:	86 e0       	ldi	r24, 0x06	; 6
    79c0:	92 e0       	ldi	r25, 0x02	; 2
    79c2:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <dbg_print_text>
boot_write_pages();
    79c6:	0e 94 06 3c 	call	0x780c	; 0x780c <boot_write_pages>
    79ca:	ff cf       	rjmp	.-2      	; 0x79ca <main+0x36>

000079cc <__mulsi3>:
    79cc:	62 9f       	mul	r22, r18
    79ce:	d0 01       	movw	r26, r0
    79d0:	73 9f       	mul	r23, r19
    79d2:	f0 01       	movw	r30, r0
    79d4:	82 9f       	mul	r24, r18
    79d6:	e0 0d       	add	r30, r0
    79d8:	f1 1d       	adc	r31, r1
    79da:	64 9f       	mul	r22, r20
    79dc:	e0 0d       	add	r30, r0
    79de:	f1 1d       	adc	r31, r1
    79e0:	92 9f       	mul	r25, r18
    79e2:	f0 0d       	add	r31, r0
    79e4:	83 9f       	mul	r24, r19
    79e6:	f0 0d       	add	r31, r0
    79e8:	74 9f       	mul	r23, r20
    79ea:	f0 0d       	add	r31, r0
    79ec:	65 9f       	mul	r22, r21
    79ee:	f0 0d       	add	r31, r0
    79f0:	99 27       	eor	r25, r25
    79f2:	72 9f       	mul	r23, r18
    79f4:	b0 0d       	add	r27, r0
    79f6:	e1 1d       	adc	r30, r1
    79f8:	f9 1f       	adc	r31, r25
    79fa:	63 9f       	mul	r22, r19
    79fc:	b0 0d       	add	r27, r0
    79fe:	e1 1d       	adc	r30, r1
    7a00:	f9 1f       	adc	r31, r25
    7a02:	bd 01       	movw	r22, r26
    7a04:	cf 01       	movw	r24, r30
    7a06:	11 24       	eor	r1, r1
    7a08:	08 95       	ret

00007a0a <__udivmodqi4>:
    7a0a:	99 1b       	sub	r25, r25
    7a0c:	79 e0       	ldi	r23, 0x09	; 9
    7a0e:	04 c0       	rjmp	.+8      	; 0x7a18 <__udivmodqi4_ep>

00007a10 <__udivmodqi4_loop>:
    7a10:	99 1f       	adc	r25, r25
    7a12:	96 17       	cp	r25, r22
    7a14:	08 f0       	brcs	.+2      	; 0x7a18 <__udivmodqi4_ep>
    7a16:	96 1b       	sub	r25, r22

00007a18 <__udivmodqi4_ep>:
    7a18:	88 1f       	adc	r24, r24
    7a1a:	7a 95       	dec	r23
    7a1c:	c9 f7       	brne	.-14     	; 0x7a10 <__udivmodqi4_loop>
    7a1e:	80 95       	com	r24
    7a20:	08 95       	ret

00007a22 <__udivmodsi4>:
    7a22:	a1 e2       	ldi	r26, 0x21	; 33
    7a24:	1a 2e       	mov	r1, r26
    7a26:	aa 1b       	sub	r26, r26
    7a28:	bb 1b       	sub	r27, r27
    7a2a:	fd 01       	movw	r30, r26
    7a2c:	0d c0       	rjmp	.+26     	; 0x7a48 <__udivmodsi4_ep>

00007a2e <__udivmodsi4_loop>:
    7a2e:	aa 1f       	adc	r26, r26
    7a30:	bb 1f       	adc	r27, r27
    7a32:	ee 1f       	adc	r30, r30
    7a34:	ff 1f       	adc	r31, r31
    7a36:	a2 17       	cp	r26, r18
    7a38:	b3 07       	cpc	r27, r19
    7a3a:	e4 07       	cpc	r30, r20
    7a3c:	f5 07       	cpc	r31, r21
    7a3e:	20 f0       	brcs	.+8      	; 0x7a48 <__udivmodsi4_ep>
    7a40:	a2 1b       	sub	r26, r18
    7a42:	b3 0b       	sbc	r27, r19
    7a44:	e4 0b       	sbc	r30, r20
    7a46:	f5 0b       	sbc	r31, r21

00007a48 <__udivmodsi4_ep>:
    7a48:	66 1f       	adc	r22, r22
    7a4a:	77 1f       	adc	r23, r23
    7a4c:	88 1f       	adc	r24, r24
    7a4e:	99 1f       	adc	r25, r25
    7a50:	1a 94       	dec	r1
    7a52:	69 f7       	brne	.-38     	; 0x7a2e <__udivmodsi4_loop>
    7a54:	60 95       	com	r22
    7a56:	70 95       	com	r23
    7a58:	80 95       	com	r24
    7a5a:	90 95       	com	r25
    7a5c:	9b 01       	movw	r18, r22
    7a5e:	ac 01       	movw	r20, r24
    7a60:	bd 01       	movw	r22, r26
    7a62:	cf 01       	movw	r24, r30
    7a64:	08 95       	ret

00007a66 <_exit>:
    7a66:	f8 94       	cli

00007a68 <__stop_program>:
    7a68:	ff cf       	rjmp	.-2      	; 0x7a68 <__stop_program>
